#!/usr/bin/env bash

set -ex

JIRA_PROJECT="$1"
JIRA_SUMMARY="$2"
JIRA_EPIC="$3"
REPO_PATH="$4"
EXTRA_COMMANDS="$5"

JIRA_ID="${JIRA_ID:-}"

SUMMARY_SLUG=$(echo "$JIRA_SUMMARY" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | tr -cd '[:alnum:]-' | cut -c1-80)

get_jira_id() {
  jira issue list -q"project = $JIRA_PROJECT AND summary ~ \"$JIRA_SUMMARY\"" --plain --no-headers | awk '{print $2}' | head -n 1
}

if [ "$JIRA_ID" = "" ]; then
  echo "Searching for existing Jira issue..."
  JIRA_ID=$(get_jira_id)
  if [ "$JIRA_ID" = "" ]; then
    echo "Creating Jira issue..."
    create_cmd="jira issue create --project \"$JIRA_PROJECT\" -tTask --summary \"$JIRA_SUMMARY\" --assignee \"$JIRA_EMAIL\""
    if [ "$JIRA_EPIC" != "" ]; then
      create_cmd="$create_cmd --parent \"$JIRA_EPIC\""
    fi
    eval "$create_cmd"

    # Wait for issue to be indexed
    max_attempts=10
    attempt=1
    while [ "$attempt" -le "$max_attempts" ]; do
      JIRA_ID=$(get_jira_id)
      if [ "$JIRA_ID" != "" ]; then
        break
      fi
      sleep 1
      ((attempt++))
    done
    if [ "$JIRA_ID" = "" ]; then
      echo "Error: Could not find the created Jira issue after $max_attempts attempts."
      exit 1
    fi
  else
    echo "Using existing Jira issue: $JIRA_ID"
  fi
fi

echo "Using Jira issue: $JIRA_ID"

JIRA_URL="${JIRA_URL}/browse/${JIRA_ID}"

# If epic provided and not set (in case existing issue)
if [ "$JIRA_EPIC" != "" ]; then
  echo "Linking to Jira Epic: '$JIRA_EPIC'"
  epic_linked=$(jira issue view "$JIRA_ID" --plain | grep -E "^Epic Link[[:space:]]+${JIRA_EPIC}" && echo "yes" || echo "no")
  if [ "$epic_linked" = "no" ]; then
    echo "Assigning to epic..."
    jira issue edit "$JIRA_ID" --parent "$JIRA_EPIC" --no-input
  fi
fi

# Extract description for later Github PR body
JIRA_DESCRIPTION=$(
  jira issue view "$JIRA_ID" --plain |
    sed -n '/^[- ]*Description[- ]*$/,/^ *View this issue on Jira:/p' |
    sed 's/\x1b\[[0-9;]*[a-zA-Z]//g'
)

BRANCH_NAME="${JIRA_ID}/${SUMMARY_SLUG}"
WORKTREE_PATH="$HOME/code/_WORKTREES/${JIRA_ID}-${SUMMARY_SLUG}"

cd "$REPO_PATH"
git fetch origin

if [ ! -d "$WORKTREE_PATH" ]; then
  if git show-ref --quiet "refs/heads/$BRANCH_NAME"; then
    echo "Branch $BRANCH_NAME exists."
    git worktree add "$WORKTREE_PATH" "$BRANCH_NAME"
  else
    echo "Creating branch $BRANCH_NAME."
    git switch main
    git pull origin main
    git worktree add -b "$BRANCH_NAME" "$WORKTREE_PATH" origin/main
  fi
else
  echo "Worktree already exists: $WORKTREE_PATH"
fi

pushd "$WORKTREE_PATH"

if ! git ls-remote --exit-code --heads origin "$BRANCH_NAME" >/dev/null; then
  echo "Pushing branch $BRANCH_NAME to origin..."
  git push -u origin "$BRANCH_NAME"
else
  echo "Branch $BRANCH_NAME already pushed to origin."
fi

if [ "$(git log origin/main..HEAD)" = "" ]; then
  echo "Creating empty commit to allow PR..."
  git commit --allow-empty -m "feat($JIRA_ID): $JIRA_SUMMARY"
  git push
fi

PR_TITLE="${JIRA_ID}: ${JIRA_SUMMARY}"

EXISTING_PR=$(gh pr list --head "$BRANCH_NAME" --json url --jq '.[].url')
if [ "$EXISTING_PR" = "" ]; then
  echo "Creating GitHub PR..."
  gh pr create --title "$PR_TITLE" --body "$JIRA_DESCRIPTION" --base main --assignee "@me" --draft
  EXISTING_PR=$(gh pr list --head "$BRANCH_NAME" --json url --jq '.[].url')
  jira issue link remote "$JIRA_ID" "$EXISTING_PR" "GitHub Pull Request"
else
  echo "GitHub PR already exists: $EXISTING_PR"
fi

TMUX_SESSION_NAME="$BRANCH_NAME"
if ! tmux has-session -t "$TMUX_SESSION_NAME" 2>/dev/null; then
  tmux new-session -s "$TMUX_SESSION_NAME" -c "$WORKTREE_PATH" -d "$SHELL"
  tmux send-keys -t "$TMUX_SESSION_NAME":1 "${EXTRA_COMMANDS}; ${SHELL}" C-m
  tmux new-window -t "$TMUX_SESSION_NAME" -n "run" -c "$WORKTREE_PATH" -d
fi
