#!/usr/bin/env bash

function arch_git_makepkg() {
	repo=$1
	dest=$2

	git_clone "$repo"

	pushd "$dest"
	makepkg -si
	popd
}

# NOTE(jesse): from: https://github.com/emilwojcik93/aur-boost/blob/main/aur-boost.sh
function arch_tune_makepkg() {
	pretty_print "Tuning Arch Makepkg Conf to use all available cores and native architecture..." "yellow"

	local file="/etc/makepkg.conf"
	if findStringFn '\-march=x86-64 -mtune=generic' ${file}; then
		sudo sed -i 's#-march=x86-64 -mtune=generic#-march=native#g' ${file}
		echo -e "Value in \"${file}\" successfuly replaced to: $(grep "^CFLAGS" ${file})"
	else
		echo -e "Can not find target value: \"-march=x86-64 -mtune=generic\"\nCurrent value: \"$(grep "^CFLAGS" ${file})\""
	fi

	if findStringFn 'MAKEFLAGS="-j2"' ${file}; then
		sudo sed -i 's#MAKEFLAGS="-j2"#MAKEFLAGS="-j$(nproc)"#g' ${file}
		echo -e "Value in \"${file}\" successfuly replaced to: $(grep "^MAKEFLAGS" ${file})"
	else
		echo -e "Can not find target value: MAKEFLAGS=\"-j2\"\nCurrent value: \"$(grep "^MAKEFLAGS" ${file})\""
	fi

	if findStringFn '#BUILDDIR=/tmp/makepkg' ${file}; then
		sudo sed -i 's|#BUILDDIR=/tmp/makepkg|BUILDDIR=/tmp/makepkg|g' ${file}
		echo -e "Value in \"${file}\" successfuly replaced to: $(grep "^BUILDDIR" ${file})"
	else
		echo -e "Can not find target value: #BUILDDIR=/tmp/makepkg\nCurrent value: \"$(grep "^BUILDDIR" ${file})\""
	fi

	if findStringFn 'COMPRESSZST=(zstd -c -z -q -)' ${file}; then
		sudo sed -i 's#COMPRESSZST=(zstd -c -z -q -)#COMPRESSZST=(zstd -1 -c -z -q -)#g' ${file}
		echo -e "Value in \"${file}\" successfuly replaced to: \"$(grep "^COMPRESSZST" ${file})\""
	else
		echo -e "Can not find target value: \"COMPRESSZST=(zstd -c -z -q -)\"\nCurrent value: \"$(grep "^COMPRESSZST" ${file})\""
	fi

	pretty_print "DONE tuning Arch Makepkg Conf to use all available cores and native architecture." "green"
}

function arch_install_base_packages() {
	pretty_print "Installing Arch Base Packages..." "yellow"

	sudo pacman -Sy

	# Speed up mirrors with reflector
	sudo pacman -S --needed --noconfirm reflector
	sudo sh -c "reflector >/etc/pacman.d/mirrorlist"

	sudo pacman -S --needed --noconfirm \
		awesome \
		alacritty \
		alsa-firmware \
		alsa-ucm-conf \
		alsa-utils \
		aws-cli \
		barrier \
		base-devel \
		chromium \
		cmake \
		dagger \
		direnv \
		dive \
		fd \
		firefox \
		fuzzel \
		fzf \
		gdb \
		go \
		graphviz \
		gtkmm3 \
		helmfile \
		helm \
		htop \
		hunspell \
		i3-wm \
		i3status \
		jq \
		k9s \
		kitty \
		kubectl \
		kubectx \
		kustomize \
		lazygit \
		maim \
		make \
		minikube \
		neovim \
		nerd-fonts \
		net-tools \
		networkmanager-openconnect \
		networkmanager-openvpn \
		npm \
		perl-anyevent-i3 \
		polkit \
		powerline-fonts \
		pgcli \
		pyenv \
		python-pip \
		ripgrep \
		rofi \
		shellcheck \
		shfmt \
		shutter \
		sof-firmware \
		sshfs \
		stow \
		terraform \
		texlab \
		texlive \
		texlive-binextra \
		tidy \
		tmux \
		ttf-droid \
		ttf-firacode-nerd \
		unzip \
		vagrant \
		wget \
		wl-clipboard \
		xclip \
		xsel \
		yq \
		zathura \
		zip \
		zsh \
		zsh-autosuggestions \
		zsh-completions \
		zsh-syntax-highlighting

	pretty_print "DONE installing Arch Base Packages." "green"
}

function arch_install_virtualization() {
	# Good reference: https://gist.github.com/tatumroaquin/c6464e1ccaef40fd098a4f31db61ab22

	pretty_print "Installing Virtualization..." "yellow"

	sudo pacman -S --needed --noconfirm \
		qemu-full \
		qemu-img \
		libvirt \
		virt-install \
		virt-manager \
		virt-viewer \
		edk2-ovmf \
		swtpm \
		guestfs-tools \
		libosinfo

	sudo systemctl enable --now libvirtd.service
	sudo virt-host-validate qemu

	pretty_print "Set tuneD" "yellow"
	yay -S --needed --noconfirm tuned
	sudo systemctl enable --now tuned.service
	sudo tuned-adm profile virtual-host
	tuned-adm active
	sudo tuned-adm verify

	sudo usermod -aG libvirt $USER

	pretty_print "Set ACL for KVM images directory" "yellow"
	sudo setfacl -R -b /var/lib/libvirt/images/
	sudo setfacl -R -m u:${USER}:rwX /var/lib/libvirt/images/
	sudo setfacl -m d:u:${USER}:rwx /var/lib/libvirt/images/

	pretty_print "DONE installing Virtualization." "green"
}

function arch_install_docker() {
	pretty_print "Installing Docker..." "green"

	sudo pacman -S --needed --noconfirm \
		docker \
		docker-compose

	sudo usermod -aG docker "$USER"
	sudo systemctl enable docker

	pretty_print "DONE installing Docker." "green"
}

function arch_install_yay() {
	pretty_print "Installing 'yay' CLI for AUR download/installs..." "yellow"

	mkdir -p $HOME/third-party-packages
	pushd $HOME/third-party-packages

	set +e
	yay_path="$(which yay)"
	set -e
	if [[ ! -x "${yay_path}" ]]; then
		arch_git_makepkg https://aur.archlinux.org/yay
	fi

	popd

	ran_yay_gendb="$HOME/.ran_yay_gendb"
	if [[ ! -f "$ran_yay_gendb" ]]; then
		yay -Y --gendb
		touch $ran_yay_gendb
	fi

	pretty_print "DONE installing 'yay' CLI for AUR download/installs." "green"
}

function arch_install_windows_deps() {
	pretty_print "Installing Windows Dependencies for cross-compilation/clangd LSP support..." "yellow"
	sudo pacman -S --needed --noconfirm \
		mingw-w64-binutils \
		mingw-w64-crt \
		mingw-w64-gcc \
		mingw-w64-headers \
		mingw-w64-winpthreads
	pretty_print "DONE installing Windows Dependencies for cross-compilation/clangd LSP support." "green"
}

function arch_install_playwright_deps() {
	pretty_print "Installing Playwright system library dependencies." "yellow"

	# Deps for playwright, see: https://github.com/microsoft/playwright/issues/2621#issuecomment-1333085109
	sudo pacman -S --needed --noconfirm \
		libwebp \
		pcre \
		x264

	sudo ln -s /usr/lib/libwebp.so.7 /usr/lib/libwebp.so.6 || true
	sudo ln -s /usr/lib/libpcre.so /usr/lib/libpcre.so.3 || true

	yay -S --needed --noconfirm \
		alsa-lib \
		dbus-glib \
		enchant \
		gtk3 \
		hyphen \
		libffi7 \
		libwebp \
		nss \
		icu66 \
		woff2

	# Taken from: https://github.com/microsoft/playwright/issues/2621#issuecomment-2083083392
	# There are some missing libraries that flite does not download by itself from AUR,
	# so we'll compile it ourselves.
	pretty_print "Installing flite1 from source..." "yellow"
	DIR_FLITE="$DIR_THIRD_PARTY/flite"
	git_clone "https://github.com/festvox/flite.git" "$DIR_FLITE"
	pushd "$DIR_FLITE"
	./configure --enable-shared
	make
	make get_voices
	sudo cp build/x86_64-linux-gnu/lib/libflite.so.1 /usr/lib
	sudo cp build/x86_64-linux-gnu/lib/libflite_cmu_grapheme_lang.so.1 /usr/lib
	sudo cp build/x86_64-linux-gnu/lib/libflite_cmu_grapheme_lex.so.1 /usr/lib
	sudo cp build/x86_64-linux-gnu/lib/libflite_cmu_indic_lang.so.1 /usr/lib
	sudo cp build/x86_64-linux-gnu/lib/libflite_cmu_indic_lex.so.1 /usr/lib
	sudo cp build/x86_64-linux-gnu/lib/libflite_cmu_time_awb.so.1 /usr/lib
	sudo cp build/x86_64-linux-gnu/lib/libflite_cmu_us_awb.so.1 /usr/lib
	sudo cp build/x86_64-linux-gnu/lib/libflite_cmu_us_kal.so.1 /usr/lib
	sudo cp build/x86_64-linux-gnu/lib/libflite_cmu_us_kal16.so.1 /usr/lib
	sudo cp build/x86_64-linux-gnu/lib/libflite_cmu_us_rms.so.1 /usr/lib
	sudo cp build/x86_64-linux-gnu/lib/libflite_cmu_us_slt.so.1 /usr/lib
	sudo cp build/x86_64-linux-gnu/lib/libflite_cmulex.so.1 /usr/lib
	sudo cp build/x86_64-linux-gnu/lib/libflite_usenglish.so.1 /usr/lib
	popd
	pretty_print "DONE installing flite1 from source." "yellow"

	pretty_print "DONE installing Playwright system library dependencies." "green"
}

function arch_install_aur_packages() {
	pretty_print "Installing AUR packages..." "yellow"

	yay -S --needed --noconfirm \
		1password-cli \
		emacs-nativecomp \
		github-cli-git \
		golangci-lint \
		google-cloud-cli \
		google-cloud-cli-gke-gcloud-auth-plugin \
		grip \
		jump \
		kind \
		kube-ps1 \
		oh-my-zsh-git \
		openvpn-update-systemd-resolved \
		pyenv-virtualenv \
		python2 \
		slack-desktop-wayland \
		tilt-bin \
		vscodium-bin \
		wdisplays

	pretty_print "DONE installing AUR packages." "green"
}
