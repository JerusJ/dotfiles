#!/usr/bin/env bash

export DIR_CODE="$HOME/code"
export DIR_THIRD_PARTY="$HOME/third-party-packages"
export DIR_NOTES_ROOT="$HOME/vaults"
export DIR_NOTES_PERSONAL="$DIR_NOTES_ROOT/personal"
export DIR_NOTES_WORK="$DIR_NOTES_ROOT/work"

# Pinned packages

export TERRAFORM_VERSION="1.9.6"
export PACKER_VERSION="1.11.2"

function pretty_print() {
	local message=$1
	local color=$2

	case $color in
	"red")
		echo -e "\033[31m--> $message\033[0m"
		;;
	"green")
		echo -e "\033[32mâœ“ $message\033[0m"
		;;
	"blue")
		echo -e "\033[34m--> $message\033[0m"
		;;
	"yellow")
		echo -e "\033[33m--> $message\033[0m"
		;;
	*)
		echo "$message"
		;;
	esac
}


function install_binary() {
        local name=$1
        local url=$2
        local destination=$3

        curl -Lo "$name" "$url"
        chmod +x "$name"
        sudo mv "$name" "$destination"
    }



# Function to check if a command exists
function command_exists() {
	command -v "$1" >/dev/null 2>&1
}

# NOTE(jesse): from: https://github.com/emilwojcik93/aur-boost/blob/main/aur-boost.sh
function findStringFn() {
	# grep values in file
	if grep -q "${1}" ${2}; then
		return 0
	else
		return 1
	fi
}

function git_clone() {
	repo=$1
	dest=$2

	if [ -z "$repo" ]; then
		pretty_print "!!! repo cannot be empty" "red"
		exit 1
	fi
	if [ -z "$dest" ]; then
		mkdir -p "$DIR_NOTES_PERSONAL"
		mkdir -p "$DIR_NOTES_WORK"
		dest=$(echo "$repo" | rev | cut -d "/" -f 1 | rev)
	fi

	echo "--> Cloning/Updating repo: '${repo}' to destination: '${dest}'"

	if [[ -d $dest ]]; then
		echo "--> ${dest} repo already exists, skipping..."
	else
		echo "--> ${dest} repo does not exist, cloning..."
		git clone --depth=1 "${repo}" "${dest}"
	fi
}

function install_dirs() {
	pretty_print "Installing Directories..." "yellow"

	mkdir -p "$DIR_CODE"
	mkdir -p "$DIR_THIRD_PARTY"
	mkdir -p "$DIR_NOTES_ROOT"
	git_clone "git@github.com:JerusJ/notes-personal.git" "$DIR_NOTES_PERSONAL"
	mkdir -p "$DIR_NOTES_WORK"

	pretty_print "DONE installing Directories." "green"
}

function install_go_packages() {
	pretty_print "Installing Go Packages..." "yellow"

	export GO111MODULE=on

	go install github.com/cweill/gotests/...@latest
	go install github.com/fatih/gomodifytags@latest
	go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
	go install github.com/x-motemen/gore/cmd/gore@latest
	go install github.com/rogpeppe/godef@latest
	go install github.com/stamblerre/gocode@latest
	go install golang.org/x/tools/cmd/godoc@latest
	go install golang.org/x/tools/cmd/goimports@latest
	go install golang.org/x/tools/cmd/gorename@latest
	go install golang.org/x/tools/cmd/guru@latest
	go install golang.org/x/tools/gopls@latest

	go install github.com/jessfraz/dockfmt@latest

	pretty_print "DONE installing Go Packages." "green"
}

function install_git_repos() {
	pretty_print "Installing Git Repositories..." "yellow"

	git_clone https://github.com/unixorn/fzf-zsh-plugin.git ~/fzf-zsh-plugin
	git_clone https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
	git_clone https://github.com/junegunn/fzf ~/.fzf
	git_clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
	git_clone https://github.com/hlissner/doom-emacs ~/.emacs.d

	pretty_print "DONE installing Git Repositories." "green"
}

function install_tmux_tpm() {
	pretty_print "Installing Tmux Plugins..." "yellow"

	$HOME/.tmux/plugins/tpm/bin/install_plugins

	pretty_print "DONE installing Tmux Plugins." "green"
}

function install_node_packages() {
	pretty_print "Installing Node Packages..." "yellow"

	NODE_DIR="$HOME/.npm_global"
	echo "--> Installing Node packages to NODE_DIR: '${NODE_DIR}'"

	mkdir -p "${NODE_DIR}"
	npm config set prefix "${NODE_DIR}"
	npm install --global \
		bash-language-server \
		typescript-language-server \
		prettier \
		pyright \
		stylelint \
		js-beautify \
		yarn \
		n

	pretty_print "DONE installing Node Packages." "green"
}

function install_doom_emacs() {
	pretty_print "Installing Doom Emacs..." "yellow"

	DOOM="$HOME/.emacs.d/bin/doom "
	$DOOM install
	$DOOM sync

	pretty_print "DONE installing Doom Emacs." "green"
}

function install_shell() {
	pretty_print "Installing Shell..." "yellow"
	chsh -s "$(which zsh)"
	pretty_print "DONE installing Shell..." "green"
}
