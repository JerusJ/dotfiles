#!/usr/bin/env bash

function install_fonts() {
    pretty_print "Installing Fonts..." "yellow"

    version="3.2.1"
    fonts_dir="${HOME}/.local/share/fonts"

    if [[ ! -d "$fonts_dir" ]]; then
        mkdir -p "$fonts_dir"
    fi

    for font in "${FONTS[@]}"; do
        zip_file="${font}.zip"
        zip_dest="$DIR_THIRD_PARTY_FONTS/${zip_file}"
        download_url="https://github.com/ryanoasis/nerd-fonts/releases/download/v${version}/${zip_file}"

        font_pattern="${font}*.{ttf,otf}"

        # Check if the font already exists by checking the font directory
        if compgen -G "${fonts_dir}/${font_pattern}" >/dev/null; then
            pretty_print "Font $font_pattern already exists, skipping download." "green"
        elif [ -f "$zip_dest" ]; then
            pretty_print "Font zip file $zip_dest already exists, skipping download." "green"
        else
            pretty_print "Downloading font: $download_url" "yellow"
            wget "$download_url" -O "$zip_dest"
            unzip -n "$zip_dest" -d "$fonts_dir"
        fi
    done

    find "$fonts_dir" -name '*Windows Compatible*' -delete

    fc-cache -fv

    pretty_print "DONE installing fonts." "green"
}

function install_neovim() {
    if ! command_exists nvim; then
        pretty_print "Installing neovim..." "yellow"

        # Define the GitHub API URL for the latest Neovim release
        local latest_release_url="https://api.github.com/repos/neovim/neovim/releases/latest"

        # Fetch the latest release information and extract the download URL for the Linux tar.gz file
        local download_url
        download_url=$(curl -s $latest_release_url | grep "browser_download_url.*linux64.tar.gz" | cut -d '"' -f 4 | tr -d "'")

        # Download the tar.gz file to /tmp
        curl -L -o /tmp/nvim-linux64.tar.gz $download_url

        # Extract the tar.gz file
        tar -xzf /tmp/nvim-linux64.tar.gz -C /tmp

        # Install Neovim by copying it to /usr/local
        sudo cp -r /tmp/nvim-linux64/* /usr/local/

        # Clean up
        rm -rf /tmp/nvim-linux64 /tmp/nvim-linux64.tar.gz

    else
        pretty_print "DONE installing neovim." "green"
    fi
}

function install_alacritty() {
    if ! command_exists alacritty; then
        pretty_print "Installing Alacritty..." "yellow"

        # Download the latest Alacritty release
        latest_version=$(curl -s https://api.github.com/repos/alacritty/alacritty/releases/latest | grep -Po '"tag_name": "\K.*?(?=")')
        curl -L -o alacritty.tar.gz "https://github.com/alacritty/alacritty/releases/download/${latest_version}/Alacritty-${latest_version}-ubuntu.tar.gz"

        # Extract the archive
        tar -xvzf alacritty.tar.gz

        # Navigate into the extracted folder
        cd Alacritty-*

        # Copy the Alacritty binary to /usr/local/bin
        sudo cp alacritty /usr/local/bin

        # Add the desktop entry for Alacritty
        sudo cp Alacritty.desktop /usr/share/applications/

        # Install the manpage
        sudo mkdir -p /usr/local/share/man/man1
        gzip -c alacritty.man | sudo tee /usr/local/share/man/man1/alacritty.1.gz >/dev/null

        # Install the shell completion
        sudo cp alacritty.bash /etc/bash_completion.d/

        # Navigate out and clean up
        cd ..
        rm -rf Alacritty-* alacritty.tar.gz

        echo "Alacritty installation completed!"
    else
        pretty_print "DONE installing Alacritty." "green"
    fi
}

function install_yq() {
    if ! command_exists yq; then
        pretty_print "Installing yq..." "yellow"
        YQ_VERSION=$(curl -s "https://api.github.com/repos/mikefarah/yq/releases/latest" | grep 'tag_name' | cut -d '"' -f 4)
        sudo wget -q "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" -O /usr/local/bin/yq
        sudo chmod +x /usr/local/bin/yq
        pretty_print "yq installed." "green"
    else
        pretty_print "yq is already installed." "green"
    fi
}

function install_kitty() {
    if ! command_exists kitty; then
        pretty_print "Installing Kitty terminal..." "yellow"
        curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
        mkdir -p ~/.local/bin
        ln -s ~/.local/kitty.app/bin/kitty ~/.local/bin/ || true
        # Create desktop entry
        cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/
        sed -i "s|Icon=kitty|Icon=$HOME/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty.desktop
        pretty_print "Kitty installed." "green"
    else
        pretty_print "Kitty is already installed." "green"
    fi
}

function install_golang() {
    if ! command_exists go; then
        pretty_print "Installing Go..." "yellow"
        GO_VERSION=$(curl -s https://go.dev/VERSION?m=text | head -n1)
        wget -q https://dl.google.com/go/${GO_VERSION}.linux-amd64.tar.gz
        sudo tar -C /usr/local -xzf ${GO_VERSION}.linux-amd64.tar.gz
        rm ${GO_VERSION}.linux-amd64.tar.gz
        pretty_print "Go installed." "green"
    else
        pretty_print "Go is already installed." "green"
    fi
}

function install_fzf() {
    if ! command_exists fzf; then
        pretty_print "Installing fzf..." "yellow"
        git_clone https://github.com/junegunn/fzf.git ${DIR_THIRD_PARTY}/fzf
        yes | ${DIR_THIRD_PARTY}/fzf/install
        pretty_print "fzf installed." "green"
    else
        pretty_print "fzf is already installed." "green"
    fi
}

function install_cmake() {
    if ! command_exists cmake || [ "$(cmake --version | grep -oP '\d+\.\d+\.\d+')" != "3.27.0" ]; then
        pretty_print "Installing latest CMake..." "yellow"
        CMAKE_VERSION="3.27.0"
        CMAKE_BUILD="cmake-${CMAKE_VERSION}-linux-x86_64"
        wget -q https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/${CMAKE_BUILD}.tar.gz
        tar -zxf ${CMAKE_BUILD}.tar.gz
        sudo cp -R ${CMAKE_BUILD}/bin/* /usr/local/bin/
        sudo cp -R ${CMAKE_BUILD}/share/* /usr/local/share/
        rm -rf ${CMAKE_BUILD} ${CMAKE_BUILD}.tar.gz
        pretty_print "CMake installed." "green"
    else
        pretty_print "CMake is already installed." "green"
    fi
}

function install_ripgrep() {
    if ! command_exists rg; then
        pretty_print "Installing ripgrep..." "yellow"
        RG_VERSION=$(curl -s https://api.github.com/repos/BurntSushi/ripgrep/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
        RG_VERSION=${RG_VERSION#v}
        RG_FILE="ripgrep_${RG_VERSION}-1_amd64.deb"
        wget -q https://github.com/BurntSushi/ripgrep/releases/download/${RG_VERSION}/${RG_FILE}
        sudo dpkg -i ${RG_FILE}
        rm ${RG_FILE}
        pretty_print "ripgrep installed." "green"
    else
        pretty_print "ripgrep is already installed." "green"
    fi
}

function install_shellcheck() {
    if ! command_exists shellcheck; then
        pretty_print "Installing ShellCheck..." "yellow"
        SC_VERSION=$(curl -s "https://api.github.com/repos/koalaman/shellcheck/releases/latest" | grep 'tag_name' | cut -d '"' -f 4)
        wget -q "https://github.com/koalaman/shellcheck/releases/download/${SC_VERSION}/shellcheck-${SC_VERSION}.linux.x86_64.tar.xz"
        tar -xf "shellcheck-${SC_VERSION}.linux.x86_64.tar.xz"
        sudo cp "shellcheck-${SC_VERSION}/shellcheck" /usr/local/bin/
        rm -rf "shellcheck-${SC_VERSION}" "shellcheck-${SC_VERSION}.linux.x86_64.tar.xz"
        pretty_print "ShellCheck installed." "green"
    else
        pretty_print "ShellCheck is already installed." "green"
    fi
}

function install_awscli() {
    if ! command_exists aws; then
        pretty_print "Installing AWS CLI..." "yellow"
        curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install
        rm -rf awscliv2.zip aws
        pretty_print "AWS CLI installed." "green"
    else
        pretty_print "AWS CLI is already installed." "green"
    fi
}

function install_kubernetes_tools() {
    pretty_print "Installing Kubernetes tools from binary releases..." "yellow"

    # Install kubectl
    if ! command_exists kubectl; then
        KUBECTL_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)
        install_binary "kubectl" "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl" "/usr/local/bin/kubectl"
    else
        pretty_print "kubectl is already installed." "green"
    fi

    # Install Minikube
    if ! command_exists minikube; then
        MINIKUBE_VERSION=$(curl -s https://api.github.com/repos/kubernetes/minikube/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
        install_binary "minikube" "https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64" "/usr/local/bin/minikube"
    else
        pretty_print "Minikube is already installed." "green"
    fi

    # Install Helm
    if ! command_exists helm; then
        HELM_VERSION=$(curl -s https://api.github.com/repos/helm/helm/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
        curl -Lo "helm.tar.gz" "https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz"
        tar -zxvf helm.tar.gz
        sudo mv linux-amd64/helm /usr/local/bin/helm
        rm -rf linux-amd64 helm.tar.gz
    else
        pretty_print "Helm is already installed." "green"
    fi

    pretty_print "DONE installing Kubernetes tools." "green"
}

function install_terraform() {
    pretty_print "Installing Terraform from binary release..." "yellow"

    if ! command_exists terraform; then
        curl -Lo "terraform.zip" "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/terraform
        rm terraform.zip
    else
        pretty_print "Terraform is already installed." "green"
    fi

    pretty_print "DONE installing Terraform." "green"
}

function install_packer() {
    pretty_print "Installing Packer from binary release..." "yellow"

    if ! command_exists packer; then
        curl -Lo "packer.zip" "https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip"
        unzip packer.zip
        sudo mv packer /usr/local/bin/packer
        rm packer.zip
    else
        pretty_print "Packer is already installed." "green"
    fi

    pretty_print "DONE installing Packer." "green"
}

function install_additional_tools() {
    pretty_print "Installing additional tools..." "yellow"

    # Install k9s
    if ! command_exists k9s; then
        curl -sS https://webinstall.dev/k9s | bash
    else
        pretty_print "k9s is already installed." "green"
    fi

    # Install Lazygit
    if ! command_exists lazygit; then
        LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
        curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
        tar xf lazygit.tar.gz lazygit
        sudo install lazygit /usr/local/bin
    else
        pretty_print "Lazygit is already installed." "green"
    fi

    # Install pyenv
    if [ ! -d "$HOME/.pyenv" ]; then
        curl https://pyenv.run | bash
    else
        pretty_print "pyenv is already installed." "green"
    fi

    # Install Zsh plugins
    ZSH_CUSTOM=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}
    if [ ! -d "${ZSH_CUSTOM}/plugins/zsh-autosuggestions" ]; then
        git clone https://github.com/zsh-users/zsh-autosuggestions "${ZSH_CUSTOM}/plugins/zsh-autosuggestions"
    else
        pretty_print "zsh-autosuggestions is already installed." "green"
    fi

    if [ ! -d "${ZSH_CUSTOM}/plugins/zsh-completions" ]; then
        git clone https://github.com/zsh-users/zsh-completions "${ZSH_CUSTOM}/plugins/zsh-completions"
    else
        pretty_print "zsh-completions is already installed." "green"
    fi

    # Install Kustomize
    if ! command_exists kustomize; then
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin
    else
        pretty_print "Kustomize is already installed." "green"
    fi

    # Install Kubectx and Kubens
    if ! command_exists kubectx; then
        sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx || true
        sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx || true
        sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens || true
    else
        pretty_print "kubectx and kubens are already installed." "green"
    fi

    # Install Tilt
    if ! command_exists tilt; then
        curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash
    else
        pretty_print "Tilt is already installed." "green"
    fi

    pretty_print "DONE installing additional tools." "green"
}

function install_dirs() {
    pretty_print "Installing Directories..." "yellow"

    mkdir -p "$DIR_CODE"
    mkdir -p "$DIR_THIRD_PARTY"
    mkdir -p "$DIR_THIRD_PARTY_WORK"
    mkdir -p "$DIR_THIRD_PARTY_FONTS"
    mkdir -p "$DIR_NOTES_ROOT"
    git_clone "git@github.com:JerusJ/vaults-work.git" "$DIR_NOTES_WORK"

    pretty_print "DONE installing Directories." "green"
}

function install_go_packages() {
    pretty_print "Installing Go Packages..." "yellow"

    export GO111MODULE=on

    # LSP
    go install github.com/cweill/gotests/...@latest
    go install github.com/fatih/gomodifytags@latest
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    go install github.com/x-motemen/gore/cmd/gore@latest
    go install github.com/rogpeppe/godef@latest
    go install github.com/stamblerre/gocode@latest
    go install golang.org/x/tools/cmd/godoc@latest
    go install golang.org/x/tools/cmd/goimports@latest
    go install golang.org/x/tools/cmd/gorename@latest
    go install golang.org/x/tools/cmd/guru@latest
    go install golang.org/x/tools/gopls@latest

    # CLI Utilities
    go install github.com/jessfraz/dockfmt@latest
    go install github.com/gsamokovarov/jump@latest
    go install github.com/cli/cli/v2/cmd/gh@latest
    go install mvdan.cc/sh/v3/cmd/shfmt@latest

    pretty_print "DONE installing Go Packages." "green"
}

function install_git_repos() {
    pretty_print "Installing Git Repositories..." "yellow"

    git_clone https://github.com/unixorn/fzf-zsh-plugin.git ~/fzf-zsh-plugin
    git_clone https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
    git_clone https://github.com/junegunn/fzf ~/.fzf
    git_clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    git_clone https://github.com/hlissner/doom-emacs ~/.emacs.d
    git_clone https://github.com/jonmosco/kube-ps1.git "${DIR_THIRD_PARTY}/kube-ps1"

    git_clone "https://github.com/JerusJ/vaults-work.git" "${DIR_NOTES_WORK}"

    pretty_print "DONE installing Git Repositories." "green"
}

function install_tmux_tpm() {
    pretty_print "Installing Tmux Plugins..." "yellow"

    $HOME/.tmux/plugins/tpm/bin/install_plugins

    pretty_print "DONE installing Tmux Plugins." "green"
}

function install_node_packages() {
    pretty_print "Installing Node Packages..." "yellow"

    NODE_DIR="$HOME/.npm_global"
    echo "--> Installing Node packages to NODE_DIR: '${NODE_DIR}'"

    mkdir -p "${NODE_DIR}"
    npm config set prefix "${NODE_DIR}"
    npm install --global \
        bash-language-server \
        typescript-language-server \
        prettier \
        pyright \
        stylelint \
        js-beautify \
        yarn \
        n

    pretty_print "DONE installing Node Packages." "green"
}

function install_doom_emacs() {
    pretty_print "Installing Doom Emacs..." "yellow"

    DOOM="$HOME/.emacs.d/bin/doom "
    $DOOM install
    $DOOM sync

    pretty_print "DONE installing Doom Emacs." "green"
}

function install_shell() {
    pretty_print "Installing Shell..." "yellow"

    current_shell=$(basename "$SHELL")

    if [[ "$current_shell" == "zsh" ]]; then
        pretty_print "Shell is already zsh, skipping installation." "green"
    else
        chsh -s "$(which zsh)"
        pretty_print "DONE installing Shell..." "green"
    fi
}
