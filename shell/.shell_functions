#!/usr/bin/env bash

set -e

# This entire function is needed because kubectx on Linux (somehow not on mac which is some sort of bash flavor?)
# does not support multiple KUBECONFIG in 1 env var separated by ':'...
# See: https://github.com/ahmetb/kubectx/issues/211
merge_kubeconfigs() {
  local target_file="$HOME/.kube/config"
  echo "Merging kubeconfig files into $target_file..."

  # Backup existing kubeconfig
  if [ -f "$target_file" ]; then
    cp "$target_file" "$target_file.bak"
    echo "Backup created at $target_file.bak"
  fi

  # Find all .kubeconfig files and merge them
  export KUBECONFIG=$(find "$HOME/.kube" -type f -name "*.kubeconfig" -print0 | xargs -0 echo | tr ' ' ':')
  kubectl config view --flatten >"$target_file"

  # Reset KUBECONFIG to avoid issues
  unset KUBECONFIG

  echo "Merged kubeconfig written to $target_file"
}

save_eks_kubeconfigs() {
  local regions=("$@")

  for region in "${regions[@]}"; do
    echo "Fetching EKS clusters in region: $region"
    clusters=$(aws eks list-clusters --region "$region" --query "clusters[]" --output text)

    if [ -z "$clusters" ]; then
      echo "No EKS clusters found in region: $region"
      continue
    fi

    for cluster in $clusters; do
      kubeconfig_file="$HOME/.kube/${cluster}-${region}.kubeconfig"
      echo "Saving kubeconfig for cluster '$cluster' in region '$region' to '$kubeconfig_file'"

      aws eks update-kubeconfig \
        --region "$region" \
        --name "$cluster" \
        --kubeconfig "$kubeconfig_file"
    done

  done

  # implicitly merge so we can just run 'kubectx' and get an fzf listing of all clusters
  merge_kubeconfigs
}
