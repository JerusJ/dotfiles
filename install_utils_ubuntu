#!/usr/bin/env bash

function ubuntu_install_base_packages() {
	pretty_print "Installing Ubuntu Base Packages..." "yellow"

	sudo apt update

	# Install packages via apt
	sudo apt install -y \
		build-essential \
		awscli \
		cmake \
		direnv \
		fd-find \
		fzf \
		golang \
		gdb \
		htop \
		hunspell \
		i3-wm \
		i3status \
		jq \
		kitty \
		make \
		python3-pip \
		ripgrep \
		rofi \
		shellcheck \
		software-properties-common \
		stow \
		tmux \
		unzip \
		wget \
		xclip \
		xsel \
		yq \
		zathura \
		zip \
		zsh \
		zsh-syntax-highlighting \
		libgtkmm-3.0-dev \
		fonts-powerline \
		protobuf-compiler \
		fonts-droid-fallback \
		fonts-firacode

	# Install fd as 'fd' instead of 'fdfind'
	if ! command_exists fd; then
		sudo ln -s "$(which fdfind)" /usr/local/bin/fd || true
	fi

	# Install Alacritty via PPA if not already installed
	if ! command_exists alacritty; then
		sudo add-apt-repository ppa:aslatter/ppa -y
		sudo apt update
		sudo apt install -y alacritty
	fi

	# Install Neovim via PPA if not already installed
	if ! command_exists nvim; then
		sudo add-apt-repository ppa:neovim-ppa/stable -y
		sudo apt update
		sudo apt install -y neovim
	fi

	pretty_print "DONE installing Ubuntu Base Packages." "green"
}

function ubuntu_install_docker() {
	pretty_print "Installing Docker..." "yellow"

	if ! command_exists docker; then
		sudo apt update
		sudo apt install -y \
			apt-transport-https \
			ca-certificates \
			curl \
			gnupg \
			lsb-release

		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

		echo \
			"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
            https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" |
			sudo tee /etc/apt/sources.list.d/docker.list >/dev/null

		sudo apt update
		sudo apt install -y docker-ce docker-ce-cli containerd.io

		# Install Docker Compose if not already installed
		if ! command_exists docker-compose; then
			DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
			sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
			sudo chmod +x /usr/local/bin/docker-compose
		fi

		# Add current user to docker group
		sudo usermod -aG docker "$USER"

		# Enable docker service
		sudo systemctl enable docker
	else
		pretty_print "Docker is already installed." "green"
	fi

	pretty_print "DONE installing Docker." "green"
}

# Reusable function to download and install binaries
function download_and_install_binary() {
	local name="$1"
	local version="$2"
	local url="$3"
	local destination="$4"

	if ! command_exists "$name"; then
		pretty_print "Installing $name..." "yellow"
		curl -LO "$url"
		sudo install -o root -g root -m 0755 "${url##*/}" "$destination"
		rm "${url##*/}"
		pretty_print "DONE installing $name." "green"
	else
		pretty_print "$name is already installed." "green"
	fi
}

function ubuntu_install_kubernetes_tools() {
	pretty_print "Installing Kubernetes tools from binary releases..." "yellow"

	# Install kubectl from binary release
	if ! command_exists kubectl; then
		KUBECTL_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)
		download_and_install_binary "kubectl" "$KUBECTL_VERSION" \
			"https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl" \
			"/usr/local/bin/kubectl"
	else
		pretty_print "kubectl is already installed." "green"
	fi

	# Install Minikube from binary release
	if ! command_exists minikube; then
		MINIKUBE_VERSION=$(curl -s https://api.github.com/repos/kubernetes/minikube/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
		download_and_install_binary "minikube" "$MINIKUBE_VERSION" \
			"https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64" \
			"/usr/local/bin/minikube"
	else
		pretty_print "Minikube is already installed." "green"
	fi

	# Install Helm from binary release
	if ! command_exists helm; then
		HELM_VERSION=$(curl -s https://api.github.com/repos/helm/helm/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
		curl -LO "https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz"
		tar -zxvf "helm-${HELM_VERSION}-linux-amd64.tar.gz"
		sudo mv linux-amd64/helm /usr/local/bin/helm
		rm -rf linux-amd64 "helm-${HELM_VERSION}-linux-amd64.tar.gz"
		pretty_print "Helm installed." "green"
	else
		pretty_print "Helm is already installed." "green"
	fi

	pretty_print "DONE installing Kubernetes tools." "green"
}

function ubuntu_install_terraform() {
	pretty_print "Installing Terraform from binary release..." "yellow"

	if ! command_exists terraform; then
		LATEST_TERRAFORM=$(curl -s https://releases.hashicorp.com/terraform/ | grep -oP 'terraform_\K[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
		curl -LO "https://releases.hashicorp.com/terraform/${LATEST_TERRAFORM}/terraform_${LATEST_TERRAFORM}_linux_amd64.zip"
		unzip "terraform_${LATEST_TERRAFORM}_linux_amd64.zip"
		sudo mv terraform /usr/local/bin/
		rm "terraform_${LATEST_TERRAFORM}_linux_amd64.zip"
		pretty_print "Terraform installed." "green"
	else
		pretty_print "Terraform is already installed." "green"
	fi

	pretty_print "DONE installing Terraform." "green"
}

function ubuntu_install_additional_tools() {
	pretty_print "Installing additional tools..." "yellow"

	# Install k9s
	if ! command_exists k9s; then
		curl -sS https://webinstall.dev/k9s | bash
	else
		pretty_print "k9s is already installed." "green"
	fi

	# Install Lazygit
	if ! command_exists lazygit; then
		sudo add-apt-repository ppa:lazygit-team/release -y
		sudo apt update
		sudo apt install -y lazygit
	else
		pretty_print "Lazygit is already installed." "green"
	fi

	# Install pyenv
	if [ ! -d "$HOME/.pyenv" ]; then
		curl https://pyenv.run | bash
	else
		pretty_print "pyenv is already installed." "green"
	fi

	# Install Zsh plugins
	ZSH_CUSTOM=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}
	if [ ! -d "${ZSH_CUSTOM}/plugins/zsh-autosuggestions" ]; then
		git clone https://github.com/zsh-users/zsh-autosuggestions "${ZSH_CUSTOM}/plugins/zsh-autosuggestions"
	else
		pretty_print "zsh-autosuggestions is already installed." "green"
	fi

	if [ ! -d "${ZSH_CUSTOM}/plugins/zsh-completions" ]; then
		git clone https://github.com/zsh-users/zsh-completions "${ZSH_CUSTOM}/plugins/zsh-completions"
	else
		pretty_print "zsh-completions is already installed." "green"
	fi

	# Install Dive
	if ! command_exists dive; then
		sudo snap install dive
	else
		pretty_print "Dive is already installed." "green"
	fi

	# Install Kustomize
	if ! command_exists kustomize; then
		curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
		sudo mv kustomize /usr/local/bin
	else
		pretty_print "Kustomize is already installed." "green"
	fi

	# Install Kubectx and Kubens
	if ! command_exists kubectx; then
		sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx || true
		sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx || true
		sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens || true
	else
		pretty_print "kubectx and kubens are already installed." "green"
	fi

	# Install Tilt
	if ! command_exists tilt; then
		curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash
		sudo mv tilt /usr/local/bin
	else
		pretty_print "Tilt is already installed." "green"
	fi

	pretty_print "DONE installing additional tools." "green"
}

function ubuntu_install_playwright_deps() {
	pretty_print "Installing Playwright system library dependencies." "yellow"

	sudo apt install -y \
		libnss3 \
		libxss1 \
		libasound2 \
		libatk1.0-0 \
		libatk-bridge2.0-0 \
		libdrm2 \
		libgbm1 \
		libgtk-3-0 \
		libxcomposite1 \
		libxdamage1 \
		libxfixes3 \
		libxrandr2 \
		libgbm-dev

	pretty_print "DONE installing Playwright system library dependencies." "green"
}
