#!/usr/bin/env bash

set -eoux


# Because of: https://askubuntu.com/questions/1512042/ubuntu-24-04-getting-error-you-must-put-some-deb-src-uris-in-your-sources-list
function ubuntu_set_sources() {
    if ! grep -q '^Types: deb deb-src$' /etc/apt/sources.list.d/ubuntu.sources; then
        sudo sed -i 's/^Types: deb$/Types: deb deb-src/' /etc/apt/sources.list.d/ubuntu.sources
    fi
}

function ubuntu_install_base_packages() {
    pretty_print "Installing Ubuntu Base Packages..." "yellow"

    sudo apt update

    # Install packages via apt
    sudo apt install -y \
        build-essential \
        git \
        nodejs \
        npm \
        curl \
        gdb \
        htop \
        hunspell \
        i3-wm \
        i3status \
        jq \
        make \
        python3-pip \
        rofi \
        software-properties-common \
        stow \
        tmux \
        unzip \
        wget \
        xclip \
        imagemagick \
        xsel \
        zathura \
        zip \
        zsh \
        autoconf \
        texinfo \
        zsh-syntax-highlighting \
        libgtkmm-3.0-dev \
        fonts-powerline \
        protobuf-compiler \
        fonts-droid-fallback \
        fonts-firacode

    # Install fd as 'fd' instead of 'fdfind'
    if ! command_exists fd; then
        sudo apt install -y fd-find
        sudo ln -s "$(which fdfind)" /usr/local/bin/fd || true
    fi

    pretty_print "DONE installing Ubuntu Base Packages." "green"
}

function ubuntu_install_emacs() {
    if ! command_exists emacs; then
        pretty_print "Installing emacs..." "yellow"


        # Clone the Emacs repository
        git_clone git://git.savannah.gnu.org/emacs.git ${DIR_THIRD_PARTY}/emacs

        pushd ${DIR_THIRD_PARTY}/emacs

        # Enable development libraries and update the apt cache
        sudo sed -i 's/# deb-src/deb-src/' /etc/apt/sources.list && sudo apt update

        # Install necessary dependencies
       sudo apt build-dep -y emacs
        sudo apt install -y libtree-sitter-dev libgccjit-10-dev build-essential libjpeg-dev libpng-dev libtiff-dev libgif-dev libmagickwand-dev \
            libm17n-dev \
            libmagickcore-dev \

        # Generate the configure file
        ./autogen.sh

        # Get the number of CPU cores for compilation
        CORES=$(nproc)

        # Configure Emacs with desired options
        ./configure --with-native-compilation --with-tree-sitter --with-imagemagick --with-json

        # Compile using all available cores
        make -j"$CORES" bootstrap

        # Verify the version
        ./src/emacs --version

        # Install Emacs system-wide
        sudo make install
        
        popd
    else
        pretty_print "DONE installing Emacs." "green"
    fi

}

function install_alacritty() {
    if ! command_exists emacs; then
        pretty_print "Installing Alacritty..." "yellow"

        # Download the latest Alacritty release
        latest_version=$(curl -s https://api.github.com/repos/alacritty/alacritty/releases/latest | grep -Po '"tag_name": "\K.*?(?=")')
        curl -L -o alacritty.tar.gz "https://github.com/alacritty/alacritty/releases/download/${latest_version}/Alacritty-${latest_version}-ubuntu.tar.gz"

        # Extract the archive
        tar -xvzf alacritty.tar.gz

        # Navigate into the extracted folder
        cd Alacritty-*

        # Copy the Alacritty binary to /usr/local/bin
        sudo cp alacritty /usr/local/bin

        # Add the desktop entry for Alacritty
        sudo cp Alacritty.desktop /usr/share/applications/

        # Install the manpage
        sudo mkdir -p /usr/local/share/man/man1
        gzip -c alacritty.man | sudo tee /usr/local/share/man/man1/alacritty.1.gz > /dev/null

        # Install the shell completion
        sudo cp alacritty.bash /etc/bash_completion.d/

        # Navigate out and clean up
        cd ..
        rm -rf Alacritty-* alacritty.tar.gz

        echo "Alacritty installation completed!"
    else
        pretty_print "DONE installing Alacritty." "green"
    fi
}

function install_yq() {
    if ! command_exists yq; then
        pretty_print "Installing yq..." "yellow"
        YQ_VERSION=$(curl -s "https://api.github.com/repos/mikefarah/yq/releases/latest" | grep 'tag_name' | cut -d '"' -f 4)
        sudo wget -q "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" -O /usr/local/bin/yq
        sudo chmod +x /usr/local/bin/yq
        pretty_print "yq installed." "green"
    else
        pretty_print "yq is already installed." "green"
    fi
}

function install_kitty() {
    if ! command_exists kitty; then
        pretty_print "Installing Kitty terminal..." "yellow"
        curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
        mkdir -p ~/.local/bin
        ln -s ~/.local/kitty.app/bin/kitty ~/.local/bin/ || true
        # Create desktop entry
        cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/
        sed -i "s|Icon=kitty|Icon=$HOME/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty.desktop
        pretty_print "Kitty installed." "green"
    else
        pretty_print "Kitty is already installed." "green"
    fi
}

function install_golang() {
    if ! command_exists go; then
        pretty_print "Installing Go..." "yellow"
        GO_VERSION=$(curl -s https://go.dev/VERSION?m=text | head -n1)
        wget -q https://dl.google.com/go/${GO_VERSION}.linux-amd64.tar.gz
        sudo tar -C /usr/local -xzf ${GO_VERSION}.linux-amd64.tar.gz
        rm ${GO_VERSION}.linux-amd64.tar.gz
        if ! grep -q '/usr/local/go/bin' ~/.profile; then
            echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.profile
            export PATH=$PATH:/usr/local/go/bin
        fi
        pretty_print "Go installed." "green"
    else
        pretty_print "Go is already installed." "green"
    fi
}

function install_fzf() {
    if ! command_exists fzf; then
        pretty_print "Installing fzf..." "yellow"
        git_clone https://github.com/junegunn/fzf.git ${DIR_THIRD_PARTY}/fzf
        yes | ${DIR_THIRD_PARTY}/fzf/install
        pretty_print "fzf installed." "green"
    else
        pretty_print "fzf is already installed." "green"
    fi
}

function install_cmake() {
    if ! command_exists cmake || [ "$(cmake --version | grep -oP '\d+\.\d+\.\d+')" != "3.27.0" ]; then
        pretty_print "Installing latest CMake..." "yellow"
        CMAKE_VERSION="3.27.0"
        CMAKE_BUILD="cmake-${CMAKE_VERSION}-linux-x86_64"
        wget -q https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/${CMAKE_BUILD}.tar.gz
        tar -zxf ${CMAKE_BUILD}.tar.gz
        sudo cp -R ${CMAKE_BUILD}/bin/* /usr/local/bin/
        sudo cp -R ${CMAKE_BUILD}/share/* /usr/local/share/
        rm -rf ${CMAKE_BUILD} ${CMAKE_BUILD}.tar.gz
        pretty_print "CMake installed." "green"
    else
        pretty_print "CMake is already installed." "green"
    fi
}

function install_ripgrep() {
    if ! command_exists rg; then
        pretty_print "Installing ripgrep..." "yellow"
        RG_VERSION=$(curl -s https://api.github.com/repos/BurntSushi/ripgrep/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
        RG_VERSION=${RG_VERSION#v}
        RG_FILE="ripgrep_${RG_VERSION}-1_amd64.deb"
        wget -q https://github.com/BurntSushi/ripgrep/releases/download/${RG_VERSION}/${RG_FILE}
        sudo dpkg -i ${RG_FILE}
        rm ${RG_FILE}
        pretty_print "ripgrep installed." "green"
    else
        pretty_print "ripgrep is already installed." "green"
    fi
}

function install_shellcheck() {
    if ! command_exists shellcheck; then
        pretty_print "Installing ShellCheck..." "yellow"
        SC_VERSION=$(curl -s "https://api.github.com/repos/koalaman/shellcheck/releases/latest" | grep 'tag_name' | cut -d '"' -f 4)
        wget -q "https://github.com/koalaman/shellcheck/releases/download/${SC_VERSION}/shellcheck-${SC_VERSION}.linux.x86_64.tar.xz"
        tar -xf "shellcheck-${SC_VERSION}.linux.x86_64.tar.xz"
        sudo cp "shellcheck-${SC_VERSION}/shellcheck" /usr/local/bin/
        rm -rf "shellcheck-${SC_VERSION}" "shellcheck-${SC_VERSION}.linux.x86_64.tar.xz"
        pretty_print "ShellCheck installed." "green"
    else
        pretty_print "ShellCheck is already installed." "green"
    fi
}

function install_awscli() {
    if ! command_exists aws; then
        pretty_print "Installing AWS CLI..." "yellow"
        curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install
        rm -rf awscliv2.zip aws
        pretty_print "AWS CLI installed." "green"
    else
        pretty_print "AWS CLI is already installed." "green"
    fi
}

function ubuntu_install_kubernetes_tools() {
    pretty_print "Installing Kubernetes tools from binary releases..." "yellow"

    # Install kubectl
    if ! command_exists kubectl; then
        KUBECTL_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)
        install_binary "kubectl" "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl" "/usr/local/bin/kubectl"
    else
        pretty_print "kubectl is already installed." "green"
    fi

    # Install Minikube
    if ! command_exists minikube; then
        MINIKUBE_VERSION=$(curl -s https://api.github.com/repos/kubernetes/minikube/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
        install_binary "minikube" "https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64" "/usr/local/bin/minikube"
    else
        pretty_print "Minikube is already installed." "green"
    fi

    # Install Helm
    if ! command_exists helm; then
        HELM_VERSION=$(curl -s https://api.github.com/repos/helm/helm/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
        curl -Lo "helm.tar.gz" "https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz"
        tar -zxvf helm.tar.gz
        sudo mv linux-amd64/helm /usr/local/bin/helm
        rm -rf linux-amd64 helm.tar.gz
    else
        pretty_print "Helm is already installed." "green"
    fi

    pretty_print "DONE installing Kubernetes tools." "green"
}

function ubuntu_install_terraform() {
    pretty_print "Installing Terraform from binary release..." "yellow"

    if ! command_exists terraform; then
        curl -Lo "terraform.zip" "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/terraform
        rm terraform.zip
    else
        pretty_print "Terraform is already installed." "green"
    fi

    pretty_print "DONE installing Terraform." "green"
}

function ubuntu_install_packer() {
    pretty_print "Installing Packer from binary release..." "yellow"

    if ! command_exists packer; then
        curl -Lo "packer.zip" "https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip"
        unzip packer.zip
        sudo mv packer /usr/local/bin/packer
        rm packer.zip
    else
        pretty_print "Packer is already installed." "green"
    fi

    pretty_print "DONE installing Packer." "green"
}

function ubuntu_install_additional_tools() {
    pretty_print "Installing additional tools..." "yellow"

    # Install k9s
    if ! command_exists k9s; then
        curl -sS https://webinstall.dev/k9s | bash
    else
        pretty_print "k9s is already installed." "green"
    fi

    # Install Lazygit
    if ! command_exists lazygit; then
        LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
        curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
        tar xf lazygit.tar.gz lazygit
        sudo install lazygit /usr/local/bin
    else
        pretty_print "Lazygit is already installed." "green"
    fi

    # Install pyenv
    if [ ! -d "$HOME/.pyenv" ]; then
        curl https://pyenv.run | bash
    else
        pretty_print "pyenv is already installed." "green"
    fi

    # Install Zsh plugins
    ZSH_CUSTOM=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}
    if [ ! -d "${ZSH_CUSTOM}/plugins/zsh-autosuggestions" ]; then
        git clone https://github.com/zsh-users/zsh-autosuggestions "${ZSH_CUSTOM}/plugins/zsh-autosuggestions"
    else
        pretty_print "zsh-autosuggestions is already installed." "green"
    fi

    if [ ! -d "${ZSH_CUSTOM}/plugins/zsh-completions" ]; then
        git clone https://github.com/zsh-users/zsh-completions "${ZSH_CUSTOM}/plugins/zsh-completions"
    else
        pretty_print "zsh-completions is already installed." "green"
    fi

    # Install Dive
    if ! command_exists dive; then
        sudo snap install dive
    else
        pretty_print "Dive is already installed." "green"
    fi

    # Install Kustomize
    if ! command_exists kustomize; then
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin
    else
        pretty_print "Kustomize is already installed." "green"
    fi

    # Install Kubectx and Kubens
    if ! command_exists kubectx; then
        sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx || true
        sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx || true
        sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens || true
    else
        pretty_print "kubectx and kubens are already installed." "green"
    fi

    # Install Tilt
    if ! command_exists tilt; then
        curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash
    else
        pretty_print "Tilt is already installed." "green"
    fi

    pretty_print "DONE installing additional tools." "green"
}

